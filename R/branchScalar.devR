# branchScalars
#
# A function that calculates how often each branch is scaled, and the mean scalar of each branch.

# 1) Use the information from subtrees in the loadRJ output to narrow down which branches to look at.

# 2) These are the only nodes that can be scaled, so go through rj_output and find out how often each of these nodes is scaled, and
#    what the scalar is.

# 3) Use the information from subtrees and taxa to find out which branches are in each node, and then you know the frequency of each branch
#    being scaled. e.g. a node that

# 3) Use getMRCA to find out which node in my tree

# This is not as straight forward as it seems, but I can return the frequency with which a partition is scaled, which would be useful a bit anyway.

# First of all, load in the output, and start playing.

# Arguments required
# Logfile
# The tree that bayestraits saw


# Try the varRates from the release version, then my new build, on a small tree for testing.
### GENERATE TESTING DATA


library(BTRTools)
library(hfgr)
setwd("/home/henry/Documents/hfg_work/tree-simulations/analysis/lkd_40mil/logs-1/lambda")


rjlog <- "lam200_40mil.log.VarRates.txt"
rjtrees <- read.nexus("lam200_40mil.log.VarRates.trees")
tree <- startertree

out <- loadRJ(rjlog)

taxa <- out$taxa
subtrees <- out$subtrees

rj <- out$rj_output

scaled.nodes <- rj[ ,grep("Node.ID", colnames(rj))]
nodes <- vector()
for (i in 1:ncol(scaled.nodes)) {
  nodes <- c(nodes, scaled.nodes[which(!is.na(scaled.nodes[ ,i])) ,i])
}

nodes <- as.numeric(nodes)
nodes <- data.frame(table(nodes))

result <- matrix(ncol = 7, nrow = length(tree$edge))
colnames(result) <- c("anc", "dec", "freq", "prop", "mean_scalar", "mean_wholepost", "taxa")
result[ ,"anc"] <- tree$edge[ ,1]
result[ ,"dec"] <- tree$edge[ ,2]
result[ ,"freq"] <- 0
result[ ,"prop"] <- 0
result[ ,"mean_scalar"] <- 0
result[ ,"mean_wholepost"] <- 0

for (i in 1:nrow(subtrees)) {
  taxcols <- which(!is.na(subtrees[i, ]))
  tax <- subtrees[i, taxcols[c(4:length(taxcols))]]
  tips <- taxa[as.numeric(tax[1, ]) ,2]
  node <- subtrees$node[i]
  
}

# Problem - more than one of the subtrees gives 201 as the root node - investigate.

tiplabs <- which(startertree$tip.label %in% tips)
plot(startertree, label.offset = 0.6)
tiplabels(tip = tiplabs, cex = 0.7)






